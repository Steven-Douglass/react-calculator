{"version":3,"sources":["calculate.js","Calculator.js","App.js","serviceWorker.js","index.js"],"names":["calculate","lhs","rhs","operator","parseFloat","parseInt","toFixed","Calculator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentEntry","lastEntry","total","currentOperator","num","length","setState","includes","op","console","log","toString","_this2","react_default","a","createElement","id","onClick","handleClickNum","handleClickOperator","className","Component","App","src_Calculator_0","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6b105833.chunk.js","sourcesContent":["export const calculate = (lhs, rhs, operator) => {\r\n    if (operator === \"+\") {\r\n        if ( ( (parseFloat(lhs) + parseFloat(rhs)) % (parseInt(parseFloat(lhs) + parseFloat(rhs))) ) > 0.000001) {\r\n            return (parseFloat(lhs) + parseFloat(rhs)).toFixed(5);\r\n        } else if ((parseFloat(lhs) + parseFloat(rhs) > 0) && parseFloat(lhs) + parseFloat(rhs) < 1)\r\n            return (parseFloat(lhs) + parseFloat(rhs)).toFixed(5);\r\n        else\r\n            return (parseFloat(lhs) + parseFloat(rhs)).toFixed(0);\r\n    }\r\n    else if (operator === \"-\") {\r\n        return (parseFloat(lhs) - parseFloat(rhs)).toFixed(5);\r\n    }\r\n    else if (operator === \"*\") {\r\n        return (parseFloat(lhs) * parseFloat(rhs)).toFixed(5);\r\n    }\r\n    else if (operator === \"/\") {\r\n        if (rhs === '0') \r\n            return 'Error - division by 0';\r\n        else\r\n            return (parseFloat(lhs) / parseFloat(rhs)).toFixed(5);\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './calculate.js';\r\nimport './Calculator.css';\r\nimport { calculate } from './calculate.js';\r\n\r\n// TODO\r\n// Negative press followed by number should produce negative number\r\n// Keep track of steps taken, i.e. 5+6+7+8 should be on display\r\n// format output of total to include commas i.e. 1,000,000\r\n// Make output text bigger / thicker\r\n\r\nclass Calculator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentEntry: '0',\r\n            lastEntry: '0',\r\n            total: 0,\r\n            currentOperator: ''\r\n        }\r\n    }\r\n\r\n    handleClickNum(num) {\r\n        // Handle overflow of too many digits\r\n        if (this.state.currentEntry.length > 17) {\r\n            this.setState({\r\n                currentEntry: 'Overflow!',\r\n                lastEntry: '0',\r\n                total: 0,\r\n                currentOperator: ''\r\n            })\r\n            return;\r\n        }\r\n        // Restart calculations if a number is pressed with no operator\r\n        if (this.state.currentOperator === '' && this.state.currentEntry === '0') {\r\n            this.setState({\r\n                total: 0\r\n            });\r\n        }\r\n        // Ensure only one decimal can be added to an entry.\r\n        if (num === '.') {\r\n            if (this.state.currentEntry === 'Overflow!') {\r\n                // Do nothing\r\n            } else if (this.state.currentEntry.includes('.')) {\r\n                // Do nothing\r\n            } else {\r\n                this.setState({\r\n                    currentEntry: this.state.currentEntry + num\r\n                })\r\n            }\r\n        // Numbers\r\n        } else if (this.state.currentEntry === '0' || this.state.currentEntry === 'Overflow!') {\r\n            // When the current entry is 0 or 'Overflow', allow it to be changed to 1-9\r\n            if (num !== '0') {\r\n                this.setState({\r\n                    currentEntry: num\r\n                })\r\n            } \r\n        } else if (this.state.currentEntry === '-0') {\r\n            // Concatenate the number press to the current negative sign\r\n            this.setState({\r\n                currentEntry: '-' + num\r\n            })\r\n        } else {\r\n            // Concatenate the number press to the current entry\r\n            this.setState({\r\n                currentEntry: this.state.currentEntry + num\r\n            })\r\n        }\r\n    }\r\n\r\n    handleClickOperator(op) {\r\n        if (op === '=') {\r\n            if (this.state.currentOperator === '') {\r\n                // There is no current operator, so return the current entry\r\n                if (this.state.currentEntry !== '-') {\r\n                    this.setState({\r\n                        lastEntry: this.state.currentEntry,\r\n                        total: parseFloat(this.state.currentEntry),\r\n                        currentOperator: '',\r\n                        currentEntry: '0'\r\n                    });\r\n                } else {\r\n                    // Do not perform calculations with the negative \r\n                    // symbol '-' as the current entry. Do nothing.\r\n                }\r\n            } else {\r\n                // The current operator is one of: + - * /\r\n                if (this.state.currentOperator === '+') {\r\n                    this.setState({\r\n                        total: calculate(this.state.total, this.state.currentEntry, '+'),\r\n                        currentEntry: '0',\r\n                        currentOperator: '',\r\n                        lastEntry: this.state.currentEntry\r\n                    });\r\n                }\r\n                else if (this.state.currentOperator === \"-\") {\r\n                    this.setState({\r\n                        total: calculate(this.state.total, this.state.currentEntry, '-'),\r\n                        currentEntry: '0',\r\n                        currentOperator: '',\r\n                        lastEntry: this.state.currentEntry\r\n                    });\r\n                } else if (this.state.currentOperator === \"*\") {\r\n                    this.setState({\r\n                        total: calculate(this.state.total, this.state.currentEntry, '*'),\r\n                        currentEntry: '0',\r\n                        currentOperator: '',\r\n                        lastEntry: this.state.currentEntry\r\n                    });\r\n                } else if (this.state.currentOperator === \"/\") {\r\n                    // eslint-disable-next-line\r\n                    if (this.state.total == 0 & this.state.currentEntry === '0') {\r\n                        // Do not divide by zero by zero. Do nothing.\r\n                    } else {\r\n                        this.setState({\r\n                            total: calculate(this.state.total, this.state.currentEntry, '/'),\r\n                            currentEntry: '0',\r\n                            currentOperator: '',\r\n                            lastEntry: this.state.currentEntry\r\n                        });\r\n                    }\r\n                    \r\n                }\r\n            }\r\n        } else if (op === '+' || op === '-' || op === '*' || op === '/') {\r\n            // The operator that was clicked is one of: + - * /\r\n            if (op === '+') {\r\n                if (this.state.currentOperator !== '' && this.state.currentEntry === '0') {\r\n                    this.setState({\r\n                        currentOperator: '+'\r\n                    });\r\n                } else if (this.state.currentOperator !== '') {\r\n                    this.setState({\r\n                        total: calculate(this.state.total, this.state.currentEntry, this.state.currentOperator),\r\n                        currentEntry: '0',\r\n                        currentOperator: '+',\r\n                        lastEntry: this.state.total\r\n                    });\r\n                } else if (this.state.total !== 0) {\r\n                    this.setState({\r\n                        //total: calculate(this.state.currentEntry, this.state.total, \"+\"),\r\n                        currentEntry: '0',\r\n                        currentOperator: '+',\r\n                        lastEntry: this.state.currentEntry\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        total: this.state.currentEntry,\r\n                        currentEntry: '0',\r\n                        currentOperator: '+',\r\n                        lastEntry: this.state.total\r\n                    });\r\n                }\r\n            } else if (op === '-') {\r\n                if (this.state.currentOperator !== '' && this.state.currentEntry === '0') {\r\n                    this.setState({\r\n                        currentOperator: '-'\r\n                    })\r\n                } else if (this.state.currentOperator !== '') {\r\n                    this.setState({\r\n                        total: calculate(this.state.total, this.state.currentEntry, this.state.currentOperator),\r\n                        currentEntry: '0',\r\n                        currentOperator: '-',\r\n                        lastEntry: this.state.total\r\n                    })\r\n                } else if (this.state.total !== 0) {\r\n                    this.setState({\r\n                        //total: calculate(this.state.currentEntry, this.state.total, \"-\"),\r\n                        currentEntry: '0',\r\n                        currentOperator: '-',\r\n                        lastEntry: this.state.currentEntry\r\n                    })\r\n                } else {\r\n                    // total === 0 and currentOperator === ''\r\n                    this.setState({\r\n                        total: this.state.currentEntry,\r\n                        currentEntry: '0',\r\n                        currentOperator: '-',\r\n                        lastEntry: this.state.total\r\n                    })\r\n                }\r\n            } else if (op === '*') {\r\n                if (this.state.currentOperator !== '' && this.state.currentEntry === '0') {\r\n                    this.setState({\r\n                        currentOperator: '*'\r\n                    })\r\n                } else if (this.state.currentOperator !== '') {\r\n                    this.setState({\r\n                        total: calculate(this.state.total, this.state.currentEntry, this.state.currentOperator),\r\n                        currentEntry: '0',\r\n                        currentOperator: '*',\r\n                        lastEntry: this.state.total\r\n                    })\r\n                } else if (this.state.total !== 0) {\r\n                    this.setState({\r\n                        //total: calculate(this.state.currentEntry, this.state.total, \"*\"),\r\n                        currentEntry: '0',\r\n                        currentOperator: '*',\r\n                        lastEntry: this.state.currentEntry\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        total: this.state.currentEntry,\r\n                        currentEntry: '0',\r\n                        currentOperator: '*',\r\n                        lastEntry: this.state.total\r\n                    })\r\n                }\r\n            } else if (op === '/') {\r\n                if (this.state.currentOperator !== '' && this.state.currentEntry === '0') {\r\n                    this.setState({\r\n                        currentOperator: '/'\r\n                    })\r\n                } else if (this.state.currentOperator !== '') {\r\n                    this.setState({\r\n                        total: calculate(this.state.total, this.state.currentEntry, this.state.currentOperator),\r\n                        currentEntry: '0',\r\n                        currentOperator: '/',\r\n                        lastEntry: this.state.total\r\n                    })\r\n                } else if (this.state.total !== 0) {\r\n                    this.setState({\r\n                        //total: calculate(this.state.currentEntry, this.state.total, \"/\"),\r\n                        currentEntry: '0',\r\n                        currentOperator: '/',\r\n                        lastEntry: this.state.currentEntry\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        total: this.state.currentEntry,\r\n                        currentEntry: '0',\r\n                        currentOperator: '/',\r\n                        lastEntry: this.state.total\r\n                    })\r\n                }\r\n            }\r\n\r\n        } else if (op === 'AC') {\r\n            this.setState({\r\n                currentEntry: '0',\r\n                lastEntry: '0',\r\n                total: 0,\r\n                currentOperator: ''\r\n            })\r\n        } else if (op === 'CE') {\r\n            this.setState({\r\n                currentEntry: '0'\r\n            })\r\n        } else if (op === \"+-\") {\r\n            if (this.state.currentEntry === '0') {\r\n                console.log(\"TRIG\");\r\n                this.setState({\r\n                    currentEntry: '-0'\r\n                })\r\n            } else if (this.state.currentEntry !== 'Overflow!') {\r\n                this.setState({\r\n                    currentEntry: -parseFloat(this.state.currentEntry).toString()\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    currentEntry: '-0'\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id='calculator'>\r\n                <div id=\"display\">\r\n                    <p id=\"text\">{this.state.currentEntry}</p>\r\n                    <p id=\"displayText\">{this.state.total}</p>\r\n                </div>\r\n                <div id='buttons'>\r\n                    <button onClick={() => this.handleClickNum(\"7\")} id=\"7\">7</button>\r\n                    <button onClick={() => this.handleClickNum(\"8\")} id=\"8\">8</button>\r\n                    <button onClick={() => this.handleClickNum(\"9\")} id=\"9\">9</button>\r\n                    <button onClick={() => this.handleClickOperator(\"+\")} id=\"add\"\r\n                        className={this.state.currentOperator === \"+\" ? 'bigText buttonPressed' : 'bigText' }>+</button>\r\n                    <button onClick={() => this.handleClickNum(\"4\")} id=\"4\">4</button>\r\n                    <button onClick={() => this.handleClickNum(\"5\")} id=\"5\">5</button>\r\n                    <button onClick={() => this.handleClickNum(\"6\")} id=\"6\">6</button>\r\n                    <button onClick={() => this.handleClickOperator(\"-\")} id=\"subtract\"\r\n                        className={this.state.currentOperator === \"-\" ? 'bigText buttonPressed' : 'bigText' }>&minus;</button>\r\n                    <button onClick={() => this.handleClickNum(\"1\")} id=\"1\">1</button>\r\n                    <button onClick={() => this.handleClickNum(\"2\")} id=\"2\">2</button>\r\n                    <button onClick={() => this.handleClickNum(\"3\")} id=\"3\">3</button>\r\n                    <button onClick={() => this.handleClickOperator(\"*\")} id=\"multiply\"\r\n                        className={this.state.currentOperator === \"*\" ? 'bigText buttonPressed' : 'bigText' }>&times;</button>\r\n                    <button onClick={() => this.handleClickNum(\"0\")} id=\"btn0\">0</button>\r\n                    <button onClick={() => this.handleClickNum(\".\")} id=\"decimal\">.</button>\r\n                    <button onClick={() => this.handleClickOperator(\"/\")} id=\"divide\"\r\n                        className={this.state.currentOperator === \"/\" ? 'bigText buttonPressed' : 'bigText' }>&divide;</button>\r\n                    <button onClick={() => this.handleClickOperator(\"AC\")} id=\"AC\">AC</button>\r\n                    <button onClick={() => this.handleClickOperator(\"CE\")} id=\"CE\">CE</button>\r\n                    <button onClick={() => this.handleClickOperator(\"+-\")} id=\"invertSign\"\r\n                        className='bigText'>&plusmn;</button>\r\n                    <button onClick={() => this.handleClickOperator(\"=\")} id=\"equals\" className='bigText'>=</button> \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Calculator;","import React, { Component } from 'react';\nimport './App.css';\nimport Calculator from './Calculator';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <Calculator/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}