{"version":3,"sources":["calculate.js","Calculator.js","App.js","serviceWorker.js","index.js"],"names":["calculate","lhs","rhs","operator","total","parseFloat","decimal","parseInt","toFixed","Calculator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentEntry","currentOperator","num","length","setState","includes","op","toString","_this2","react_default","a","createElement","id","onClick","handleClickNum","className","handleClickOperator","Component","App","src_Calculator_0","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c63a45d6.chunk.js","sourcesContent":["export const calculate = (lhs, rhs, operator) => {\r\n    // Error checking\r\n    if (lhs === 'Error - division by 0') \r\n        return 'Error - division by 0';\r\n\r\n    // Total will hold the final value of the calculation\r\n    var total = 0;\r\n\r\n    // Calculate total based on operator\r\n    if (operator === '+') \r\n        total = parseFloat(lhs) + parseFloat(rhs);\r\n    else if (operator === '-')\r\n        total = parseFloat(lhs) - parseFloat(rhs);\r\n    else if (operator === '*')\r\n        total = parseFloat(lhs) * parseFloat(rhs);\r\n    else if (operator === '/') {\r\n        if (rhs === '0') \r\n            return 'Error - division by 0';\r\n        else\r\n            total = parseFloat(lhs) / parseFloat(rhs);\r\n    }\r\n\r\n    // Check number for decimal point and fix the length of the decimal\r\n    var decimal = total - parseInt(total);\r\n    if (decimal > 0) {\r\n        if (decimal.toFixed(5) - decimal.toFixed(1) === 0) \r\n            total = total.toFixed(1);\r\n        else if (decimal.toFixed(5) - decimal.toFixed(2) === 0) \r\n            total = total.toFixed(2);\r\n        else if (decimal.toFixed(5) - decimal.toFixed(3) === 0) \r\n            total = total.toFixed(3);\r\n        else if (decimal.toFixed(5) - decimal.toFixed(4) === 0)\r\n            total = total.toFixed(4);\r\n        else if (decimal.toFixed(5) - decimal.toFixed(5) === 0)\r\n            total = total.toFixed(5);\r\n    }\r\n\r\n    return total;\r\n}","import React, { Component } from 'react';\r\nimport './calculate.js';\r\nimport './Calculator.css';\r\nimport { calculate } from './calculate.js';\r\n\r\nclass Calculator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentEntry: '0',\r\n            total: 0,\r\n            currentOperator: ''\r\n        }\r\n    }\r\n\r\n    handleClickNum(num) {\r\n        // Handle overflow of too many digits\r\n        if (this.state.currentEntry.length > 17) {\r\n            this.setState({\r\n                currentEntry: 'Overflow!',\r\n                total: 0,\r\n                currentOperator: ''\r\n            })\r\n            return;\r\n        }\r\n        // Restart calculations if a number is pressed with no operator\r\n        if (this.state.currentOperator === '' && this.state.currentEntry === '0') {\r\n            this.setState({\r\n                total: 0\r\n            });\r\n        }\r\n        // Ensure only one decimal can be added to an entry.\r\n        if (num === '.') {\r\n            if (this.state.currentEntry === 'Overflow!') {\r\n                // Do nothing\r\n            } else if (this.state.currentEntry.includes('.')) {\r\n                // Do nothing\r\n            } else {\r\n                this.setState({\r\n                    currentEntry: this.state.currentEntry + num\r\n                })\r\n            }\r\n        // Number presses\r\n        } else if (this.state.currentEntry === '0') {\r\n            // When the current entry is 0, allow it to be changed to 1-9\r\n            if (num !== '0') {\r\n                this.setState({\r\n                    currentEntry: num\r\n                })\r\n            } \r\n        } else if (this.state.currentEntry === 'Overflow!') {\r\n            // When the current entry is 'Overflow!', change\r\n            // currentEntry to the number that was pressed\r\n            this.setState({\r\n                currentEntry: num\r\n            })\r\n        }\r\n        else if (this.state.currentEntry === '-0') {\r\n            // Concatenate the number press to the current negative sign\r\n            this.setState({\r\n                currentEntry: '-' + num\r\n            })\r\n        } else {\r\n            // Concatenate the number press to the current entry\r\n            this.setState({\r\n                currentEntry: this.state.currentEntry + num\r\n            })\r\n        }\r\n    }\r\n\r\n    handleClickOperator(op) {\r\n        if (op === '=') {\r\n            if (this.state.currentOperator === '') {\r\n                // If there is no current operator, return the current entry\r\n                this.setState({\r\n                    total: parseFloat(this.state.currentEntry),\r\n                    currentOperator: '',\r\n                    currentEntry: '0'\r\n                });\r\n            } else {\r\n                // The current operator is one of: + - * /\r\n                if (this.state.currentOperator === '+') {\r\n                    this.setState({\r\n                        total: calculate(this.state.total, this.state.currentEntry, '+'),\r\n                        currentEntry: '0',\r\n                        currentOperator: '',\r\n                    });\r\n                }\r\n                else if (this.state.currentOperator === \"-\") {\r\n                    this.setState({\r\n                        total: calculate(this.state.total, this.state.currentEntry, '-'),\r\n                        currentEntry: '0',\r\n                        currentOperator: '',\r\n                    });\r\n                } else if (this.state.currentOperator === \"*\") {\r\n                    this.setState({\r\n                        total: calculate(this.state.total, this.state.currentEntry, '*'),\r\n                        currentEntry: '0',\r\n                        currentOperator: '',\r\n                    });\r\n                } else if (this.state.currentOperator === \"/\") {\r\n                    // eslint-disable-next-line\r\n                    if (this.state.total == 0 & this.state.currentEntry === '0') {\r\n                        // Do not divide by zero by zero. Do nothing.\r\n                    } else {\r\n                        this.setState({\r\n                            total: calculate(this.state.total, this.state.currentEntry, '/'),\r\n                            currentEntry: '0',\r\n                            currentOperator: '',\r\n                        });\r\n                    }\r\n                    \r\n                }\r\n            }\r\n        } else if (op === '+' || op === '-' || op === '*' || op === '/') {\r\n            // The operator that was clicked is one of: + - * /\r\n            if (op === '+') {\r\n                // Allow for operator change if no numbers have been pressed\r\n                if (this.state.currentOperator !== '' && this.state.currentEntry === '0') {\r\n                    this.setState({\r\n                        currentOperator: '+'\r\n                    });\r\n                } else if (this.state.currentOperator !== '') {\r\n                    // Perform the calculation of the last operator. This allows\r\n                    // operations to be chained together without needing to press\r\n                    // the equals key.\r\n                    this.setState({\r\n                        total: calculate(this.state.total, this.state.currentEntry, this.state.currentOperator),\r\n                        currentEntry: '0',\r\n                        currentOperator: '+',\r\n                    });\r\n                } else if (this.state.total !== 0) {\r\n                    // There is a total value with no current operator. This\r\n                    // occurs after the equal button is pressed. Set currentOperator\r\n                    // to the operator that was pressed.\r\n                    this.setState({\r\n                        currentOperator: '+',\r\n                    });\r\n                } else {\r\n                    // Total === 0. Set the total to currentEntry.\r\n                    this.setState({\r\n                        total: parseFloat(this.state.currentEntry).toString(),\r\n                        currentEntry: '0',\r\n                        currentOperator: '+',\r\n                    });\r\n                }\r\n            } else if (op === '-') {\r\n                // Allow for operator change if no numbers have been pressed\r\n                if (this.state.currentOperator !== '' && this.state.currentEntry === '0') {\r\n                    this.setState({\r\n                        currentOperator: '-'\r\n                    })\r\n                } else if (this.state.currentOperator !== '') {\r\n                    // Perform the calculation of the last operator. This allows\r\n                    // operations to be chained together without needing to press\r\n                    // the equals key.\r\n                    this.setState({\r\n                        total: calculate(this.state.total, this.state.currentEntry, this.state.currentOperator),\r\n                        currentEntry: '0',\r\n                        currentOperator: '-',\r\n                    })\r\n                } else if (this.state.total !== 0) {\r\n                    // There is a total value with no current operator. This\r\n                    // occurs after the equal button is pressed. Set currentOperator\r\n                    // to the operator that was pressed.\r\n                    this.setState({\r\n                        currentOperator: '-',\r\n                    })\r\n                } else {\r\n                    // Total === 0. Set the total to currentEntry.\r\n                    this.setState({\r\n                        total: parseFloat(this.state.currentEntry).toString(),\r\n                        currentEntry: '0',\r\n                        currentOperator: '-',\r\n                    })\r\n                }\r\n            } else if (op === '*') {\r\n                // Allow for operator change if no numbers have been pressed\r\n                if (this.state.currentOperator !== '' && this.state.currentEntry === '0') {\r\n                    this.setState({\r\n                        currentOperator: '*'\r\n                    })\r\n                } else if (this.state.currentOperator !== '') {\r\n                    // Perform the calculation of the last operator. This allows\r\n                    // operations to be chained together without needing to press\r\n                    // the equals key.\r\n                    this.setState({\r\n                        total: calculate(this.state.total, this.state.currentEntry, this.state.currentOperator),\r\n                        currentEntry: '0',\r\n                        currentOperator: '*',\r\n                    })\r\n                } else if (this.state.total !== 0) {\r\n                    // There is a total value with no current operator. This\r\n                    // occurs after the equal button is pressed. Set currentOperator\r\n                    // to the operator that was pressed.\r\n                    this.setState({\r\n                        currentOperator: '*',\r\n                    })\r\n                } else {\r\n                    // Total === 0. Set the total to currentEntry.\r\n                    this.setState({\r\n                        total: parseFloat(this.state.currentEntry).toString(),\r\n                        currentEntry: '0',\r\n                        currentOperator: '*',\r\n                    })\r\n                }\r\n            } else if (op === '/') {\r\n                // Allow for operator change if no numbers have been pressed\r\n                if (this.state.currentOperator !== '' && this.state.currentEntry === '0') {\r\n                    this.setState({\r\n                        currentOperator: '/'\r\n                    })\r\n                } else if (this.state.currentOperator !== '') {\r\n                    // Perform the calculation of the last operator. This allows\r\n                    // operations to be chained together without needing to press\r\n                    // the equals key.\r\n                    this.setState({\r\n                        total: calculate(this.state.total, this.state.currentEntry, this.state.currentOperator),\r\n                        currentEntry: '0',\r\n                        currentOperator: '/',\r\n                    })\r\n                } else if (this.state.total !== 0) {\r\n                    // There is a total value with no current operator. This\r\n                    // occurs after the equal button is pressed. Set currentOperator\r\n                    // to the operator that was pressed.\r\n                    this.setState({\r\n                        currentOperator: '/',\r\n                    })\r\n                } else {\r\n                    // Total === 0. Set the total to currentEntry.\r\n                    this.setState({\r\n                        total: parseFloat(this.state.currentEntry).toString(),\r\n                        currentEntry: '0',\r\n                        currentOperator: '/',\r\n                    })\r\n                }\r\n            }\r\n        } else if (op === 'AC') {\r\n            this.setState({\r\n                currentEntry: '0',\r\n                total: 0,\r\n                currentOperator: ''\r\n            })\r\n        } else if (op === 'CE') {\r\n            this.setState({\r\n                currentEntry: '0'\r\n            })\r\n        } else if (op === \"+-\") {\r\n            if (this.state.currentEntry === '0') {\r\n                this.setState({\r\n                    currentEntry: '-0'\r\n                })\r\n            } else if (this.state.currentEntry === '-0') {\r\n                this.setState({\r\n                    currentEntry: '0'\r\n                })\r\n            } else if (this.state.currentEntry !== 'Overflow!') {\r\n                this.setState({\r\n                    currentEntry: -parseFloat(this.state.currentEntry).toString()\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id='calculator'>\r\n                <div id=\"display\">\r\n                    <p id=\"text\">{this.state.currentEntry}</p>\r\n                    <p id=\"displayText\">{this.state.total}</p>\r\n                </div>\r\n                <div id='buttons'>\r\n                    <button onClick={() => this.handleClickNum(\"7\")} id=\"7\" className='number'>7</button>\r\n                    <button onClick={() => this.handleClickNum(\"8\")} id=\"8\" className='number'>8</button>\r\n                    <button onClick={() => this.handleClickNum(\"9\")} id=\"9\" className='number'>9</button>\r\n                    <button onClick={() => this.handleClickOperator(\"+\")} id=\"add\"\r\n                        className={this.state.currentOperator === \"+\" ? 'bigText buttonPressed' : 'bigText' }>+</button>\r\n                    <button onClick={() => this.handleClickNum(\"4\")} id=\"4\" className='number'>4</button>\r\n                    <button onClick={() => this.handleClickNum(\"5\")} id=\"5\" className='number'>5</button>\r\n                    <button onClick={() => this.handleClickNum(\"6\")} id=\"6\" className='number'>6</button>\r\n                    <button onClick={() => this.handleClickOperator(\"-\")} id=\"subtract\"\r\n                        className={this.state.currentOperator === \"-\" ? 'bigText buttonPressed' : 'bigText' }>&minus;</button>\r\n                    <button onClick={() => this.handleClickNum(\"1\")} id=\"1\" className='number'>1</button>\r\n                    <button onClick={() => this.handleClickNum(\"2\")} id=\"2\" className='number'>2</button>\r\n                    <button onClick={() => this.handleClickNum(\"3\")} id=\"3\" className='number'>3</button>\r\n                    <button onClick={() => this.handleClickOperator(\"*\")} id=\"multiply\"\r\n                        className={this.state.currentOperator === \"*\" ? 'bigText buttonPressed' : 'bigText' }>&times;</button>\r\n                    <button onClick={() => this.handleClickNum(\"0\")} id=\"btn0\">0</button>\r\n                    <button onClick={() => this.handleClickNum(\".\")} id=\"decimal\" className='number'>.</button>\r\n                    <button onClick={() => this.handleClickOperator(\"/\")} id=\"divide\"\r\n                        className={this.state.currentOperator === \"/\" ? 'bigText buttonPressed' : 'bigText' }>&divide;</button>\r\n                    <button onClick={() => this.handleClickOperator(\"AC\")} id=\"AC\">AC</button>\r\n                    <button onClick={() => this.handleClickOperator(\"CE\")} id=\"CE\">CE</button>\r\n                    <button onClick={() => this.handleClickOperator(\"+-\")} id=\"invertSign\"\r\n                        className='bigText'>&plusmn;</button>\r\n                    <button onClick={() => this.handleClickOperator(\"=\")} id=\"equals\" className='bigText'>=</button> \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Calculator;","import React, { Component } from 'react';\nimport './App.css';\nimport Calculator from './Calculator';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <Calculator/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}